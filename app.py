import streamlit as st
import streamlit_authenticator as stauth
import firebase_admin
from firebase_admin import credentials, firestore
import google.generativeai as genai
import base64

# --- Base64 representation of the Tohid Afridi image ---
# This string contains the image data, so no separate file is needed.
AFREDI_PIC_BASE64 = "

# --- Firebase and Gemini API Initialization ---
try:
    # For deployment: Load Firebase credentials from Streamlit Secrets
    cred = credentials.Certificate(st.secrets["FIRE_CREDS"])
    if not firebase_admin._apps:
        firebase_admin.initialize_app(cred)
    db = firestore.client()
except Exception:
    # Fallback for local development if secrets are not found
    try:

        cred = credentials.Certificate("firebase_key.json")
        if not firebase_admin._apps:
            firebase_admin.initialize_app(cred)
        db = firestore.client()
    except Exception as e:
        st.error(f"Firebase connection error: Could not find 'firebase_key.json'. {e}")
        st.stop()

try:
    # For deployment: Load Gemini API Key from Streamlit Secrets
    gemini_api_key = st.secrets["GEMINI_API_KEY"]
except (KeyError, FileNotFoundError):
    # Fallback for local development
    gemini_api_key = "AIzaSyCGFRjdIWY0lL7uG8rG2_Ch6gZdeHWUXxQ" # Enter your key here

genai.configure(api_key=gemini_api_key)

# --- Page Configuration and CSS ---
st.set_page_config(page_title="Breakup Recovery", page_icon="💔", layout="centered")
st.markdown("<style>.stApp { background: linear-gradient(to bottom right, #e0f7fa, #e0eafc, #fce4ec); }</style>", unsafe_allow_html=True)


# --- Authentication Functions ---
def get_user_data():
    """Loads user data from Firestore."""
    users_ref = db.collection('users')
    docs = users_ref.stream()
    credentials_dict = {"usernames": {}}
    for doc in docs:
        user_data = doc.to_dict()
        username = user_data.get('username')
        if username:
            credentials_dict["usernames"][username] = {
                "name": user_data.get('name', ''),
                "password": user_data.get('password', ''),
                "email": user_data.get('email', '')
            }
    return credentials_dict

def run_auth():
    """Handles login and registration."""
    if 'credentials' not in st.session_state:
        st.session_state.credentials = get_user_data()

    authenticator = stauth.Authenticate(
        credentials=st.session_state.credentials,
        cookie_name="breakup_cookie",
        key="csrf_key_123",
        cookie_expiry_days=30
    )

    if not st.session_state.get("authentication_status"):
        choice = st.selectbox("Menu", ["Login", "Register"])

        if choice == "Login":
            name, authentication_status, username = authenticator.login('Login', 'main')
        else:
            try:
                if authenticator.register_user('Register', 'main', preauthorization=False):
                    username = st.session_state.get('username')
                    if username:
                        new_user_data = st.session_state.credentials['usernames'][username]
                        hashed_password = stauth.Hasher([new_user_data['password']]).generate()[0]

                        db.collection('users').document(username).set({
                            'username': username, 'password': hashed_password,
                            'name': new_user_data['name'], 'email': new_user_data['email']
                        })
                        
                        st.session_state.credentials = get_user_data()
                        st.session_state['authentication_status'] = True
                        st.session_state['name'] = new_user_data['name']
                        st.session_state['username'] = username
                        st.rerun()
            except Exception as e:
                # Catch general exception and check the message for duplicate username
                if "username already taken" in str(e).lower():
                    st.error("This username is already registered. Please try another one.")
                else:
                    st.error(f"An error occurred during registration: {e}")

    if st.session_state.get("authentication_status"):
        return st.session_state['name'], True, st.session_state['username'], authenticator

    return None, False, None, authenticator

# --- Agents and Chat Functions ---
AGENTS = {
    'therapist': {
        'title': 'Therapist 💖',
        'prompt': 'Act as a compassionate and calm therapist. Based on the user\'s input about their breakup sadness and frustration, advise them to accept their emotions, give themselves time, and focus on their mental well-being. Respond in English.'
    },
    'closure': {
        'title': 'Closure Letter ✉️',
        'prompt': 'Act as a closure agent. From the user\'s input, draft an emotional but unsent message. This is just for the user\'s peace of mind. Clearly state that this message should not be sent. Respond in English.'
    },
    'routine': {
        'title': 'Routine Planner 📝',
        'prompt': 'Act as a routine planner. Based on the user\'s current state and interests, create an effective daily routine for them that will help keep their mind busy and start a new life. Respond in English.'
    },
    'brutalHonesty': {
        'title': 'Brutal Honesty 💪',
        'prompt': 'Act as a brutal honesty agent. Based on the user\'s input, give direct and unfiltered opinions. Your response should be direct, realistic, and devoid of emotion. Respond in English.'
    },
    'chatAnalysis': {
        'title': 'Chat Analysis 🔍',
        'prompt': 'Act as a chat analyzer. Analyze the provided chat screenshot and give realistic and helpful feedback in the context of a breakup. Base your advice on these core principles: accept your emotions, give yourself time, spend time with friends, stay busy with new activities, take care of yourself, and seek professional help. Respond in English.'
    },
    'afredi_meme': {
        'title': 'Afridi Bhai: Motivational Speaker 😎',
        'prompt': """You will talk like the viral Bangladeshi content creator, Tohid Afridi. Motivate users who are frustrated about their breakup in his signature style. In your response, use some of his famous catchphrases or mimic his speaking style, such as:
        - "Life is one!"
        - "Chill, bro!"
        - "Hey man, what's up!"
        - "Believe in yourself!"
        - "Forget negative thoughts!"
        - "This is just a trailer!"
        - "Next mission on chill!"

        Take the user's frustration lightly and give them fun and direct advice to move forward. Use emojis. Respond in English.""",
        'image': AFREDI_PIC_BASE64
    }
}

def get_gemini_response(prompt_text, agent_prompt, uploaded_file=None):
    """Generates a response from the Gemini API."""
    try:
        model = genai.GenerativeModel('gemini-1.5-flash-latest')
        content_parts = [agent_prompt, f"Input: {prompt_text}"]

        if uploaded_file:
            uploaded_file.seek(0)
            image_bytes = uploaded_file.read()
            image_part = {"mime_type": uploaded_file.type, "data": image_bytes}
            content_parts.append(image_part)

        response = model.generate_content(content_parts)
        return response.text
    except Exception as e:
        return f"Gemini API Error: {e}"

def load_chat_history(username):
    """Loads chat history for a specific user from Firestore."""
    chats_ref = db.collection('chats').document(username).collection('messages')
    docs = chats_ref.order_by('timestamp').stream()
    return [doc.to_dict() for doc in docs]

def save_message(username, role, content, agent_type=None, image_data=None):
    """Saves a chat message to Firestore."""
    chats_ref = db.collection('chats').document(username).collection('messages')
    message_data = {
        "role": role, "content": content, "timestamp": firestore.SERVER_TIMESTAMP
    }
    if agent_type: message_data["agent_type"] = agent_type
    if image_data: message_data["image_data"] = image_data
    chats_ref.add(message_data)

# --- Main App ---
def main_app(username, name, authenticator):
    """Displays the main chat interface after login."""
    st.sidebar.title(f"Welcome, {name}")
    authenticator.logout("Logout", "sidebar")
    
    st.title("💔 Breakup Recovery")

    selected_agent_key = st.sidebar.radio("Select Agent", list(AGENTS.keys()), format_func=lambda x: AGENTS[x]['title'])
    
    if selected_agent_key == 'afredi_meme':
        try:
            image_string = AGENTS[selected_agent_key]['image']
            if "," in image_string:
                img_data = image_string.split(",")[1]
            else:
                img_data = image_string
            st.image(base64.b64decode(img_data), caption="Afridi Bhai: Motivational Speaker")
        except Exception as e:
            st.warning(f"Could not load Afridi Bhai's image: {e}")
    
    st.sidebar.markdown(f"**You are chatting with:** {AGENTS[selected_agent_key]['title']}")
    uploaded_file = st.sidebar.file_uploader("Upload a chat screenshot (optional)", type=["png", "jpg", "jpeg"])

    if "messages" not in st.session_state or st.session_state.get('current_user') != username:
        st.session_state.messages = load_chat_history(username)
        st.session_state.current_user = username

    for message in st.session_state.messages:
        role = "user" if message.get("role") == "user" else "assistant"
        with st.chat_message(role):
            if "image_data" in message and message["image_data"]:
                try: st.image(base64.b64decode(message["image_data"]))
                except Exception: st.write("Image could not be displayed.")
            if message.get("content"): st.markdown(message.get("content"))

    if prompt := st.chat_input("Tell me what's on your mind..."):
        with st.chat_message("user"):
            if uploaded_file: st.image(uploaded_file)
            st.markdown(prompt)

        image_data_b64 = None
        if uploaded_file:
            uploaded_file.seek(0)
            image_data_b64 = base64.b64encode(uploaded_file.read()).decode('utf-8')
        save_message(username, "user", prompt, selected_agent_key, image_data_b64)
        st.session_state.messages.append({"role": "user", "content": prompt})

        with st.chat_message("assistant"):
            with st.spinner("Thinking..."):
                response = get_gemini_response(prompt, AGENTS[selected_agent_key]['prompt'], uploaded_file)
                st.markdown(response)

        save_message(username, "agent", response, selected_agent_key)
        st.session_state.messages.append({"role": "agent", "content": response})
        st.rerun()

# --- Run the App ---
if __name__ == "__main__":
    name, authentication_status, username, authenticator = run_auth()

    if authentication_status:
        main_app(username, name, authenticator)
    elif authentication_status is False:
        st.error("Incorrect username or password")
    elif authentication_status is None:
        st.warning("Please log in or create a new account.")
